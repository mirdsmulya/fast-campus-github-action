name: CI

# Controls when the workflow will run

on:
  # Triggers the workflow on push or pull request events for main
  push:  
    branches: [ main ]
    tags: [ v*.*.* ]
      
  pull_request:
    branches: [ main ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: fast-campus                  # set this to your ECR repository name 
  EKS_CLUSTER_NAME: fast-campus-cluster           # set this to your EKS cluster name 
  APP_NAME: hello-world                         # set this to your application name
  ENVIRONMENT: staging                          # set this to your environment, e.g. staging, production
  KUBERNETES_NAMESPACE: app-staging                 # set this to your Kubernetes namespace
  HELM_CHART_PATH: deployment/k8s

# A workflow run is made up of one or more jobs 
jobs:
  # This workflow contains a job called "build and push image"
  build-and-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps are a sequence of tasks executed as part of a job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        if: startsWith(github.ref, 'refs/tags/')
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{  github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: startsWith (github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}


      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # - name: Update Helm dependencies
      #   run: helm dependency update helm-chart

      - name: Deploy to EKS using Helm
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          helm upgrade --install $APP_NAME ./$HELM_CHART_PATH -f HELM_CHART_PATH/values-$ENVIRONMENT.yaml --namespace $KUBERNETES_NAMESPACE \
            --set image.repository=$REGISTRY/$REPOSITORY \
            --set image.tag=$IMAGE_TAG
